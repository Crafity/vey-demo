(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('React'), require('ReactDOM')) :
	typeof define === 'function' && define.amd ? define(['React', 'ReactDOM'], factory) :
	(factory(global.vendor.React,global.vendor.ReactDOM));
}(this, (function (React,ReactDOM) { 'use strict';

React = React && 'default' in React ? React['default'] : React;
ReactDOM = ReactDOM && 'default' in ReactDOM ? ReactDOM['default'] : ReactDOM;

/*eslint-env*/ /*globals */
/**
 * This type represents an Event Emitter.
 * An event emitter is a base object that provides eventing functionality
 * @constructor
 */
var EventEmitter = function EventEmitter() {};

/**
 * Subscribe to an event
 * @param {String} name The name of the event to subscribe to
 * @param {Function} handler The handler to call when the event occurs
 * @return {EventEmitter} Return EventEmitter instance
 */
EventEmitter.prototype.on = function (name, handler) {
  if (!name) {
    throw new Error("Argument 'name' is required");
  }
  if (!handler) {
    throw new Error("Argument 'handler' is required");
  }
  /* Ensure the internal collection of events exists on this object */
  this._events = this._events || {};
  /* Store the event handler under the chosen event name */
  this._events[name] = [].concat(this._events[name] || []).concat(handler);
  return this;
};

/**
 * Subscribe to an event only once
 * @param {String} name The name of the event to subscribe to
 * @param {Function} handler The handler to call when the event occurs
 * @return {EventEmitter} Return EventEmitter instance
 */
EventEmitter.prototype.once = function (name, handler) {
  if (!name) {
    throw new Error("Argument 'name' is required");
  }
  if (!handler) {
    throw new Error("Argument 'handler' is required");
  }
  var onceHandler = function () {
    this._events[name].splice(this._events[name].indexOf(onceHandler), 1);
    handler.apply(this, arguments);
  };

  /* Ensure the internal collection of events exists on this object */
  this._events = this._events || {};
  /* Store the event handler under the chosen event name */
  this._events[name] = [].concat(this._events[name] || []).concat(onceHandler);
  return this;
};

/**
 * Emit an event
 * @param {String} name The name of the event to emit
 * @return {EventEmitter} Return EventEmitter instance
 */
EventEmitter.prototype.emit = function emit(name) {
  var self = this;
  /* if there are no registered handlers cancel emitting*/
  if (!this._events) { return this; }
  /* Get all the arguments and convert them into an array */
  var args = Array.prototype.slice.call(arguments);
  /* Remove the first argument which is the name of the event */
  args.splice(0, 1);
  /* Loop over the handlers and invoke them one by one */
  [].concat(this._events[name]).forEach(function (handler) {
    if (!handler) { return; }
    /* Call the handler and pass on the optional arguments */
    handler.apply(self, args);
  });
  return this;
};

/**
 * Remove all event listeners
 * @param {String} [name] Optional. The name of event to remove the listeners from
 * @return {EventEmitter} Return EventEmitter instance
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(name) {
  /* if there are no registered handlers cancel emitting*/
  if (!this._events) { return this; }
  if (!name) {
    this._events = {};
  } else {
    this._events[name] = [];
  }
  return this;
};

/*eslint-env*/ /*globals window*/
var _subscriptions = new EventEmitter();
// const _store = window.__store = window.__store || { state: [{}], index: 0 };

function getStore() {
  return window.__store = window.__store || {};
}

function shallowCopy(from, into) {
  var result = {};
  if (into) { Object.keys(into).forEach(function (key) { return (result[key] = into[key]); }); }
  if (from) { Object.keys(from).forEach(function (key) { return (result[key] = from[key]); }); }
  return Object.freeze(result);
}

function assoc(state, data, value) {
  if (arguments.length < 2) {
    throw new Error("Arguments 'state' and 'data' are required");
  }
  if (arguments.length === 2 && typeof data === "object") {
    return shallowCopy(data, state);
  }
  if (arguments.length > 3) {
    throw new Error("Not more than 3 arguments allowed");
  }
  return shallowCopy(( obj = {}, obj[data] = value, obj ), state);
  var obj;
}

var Store = function Store(ref) {
  if ( ref === void 0 ) ref = {};
  var store = ref.store; if ( store === void 0 ) store = getStore();
  var subscriptions = ref.subscriptions; if ( subscriptions === void 0 ) subscriptions = _subscriptions;
  var scope = ref.scope; if ( scope === void 0 ) scope = "global";
  var persistent = ref.persistent; if ( persistent === void 0 ) persistent = true;

  if (!store) {
    throw new Error("Argument 'store' is required.");
  }
  if (!subscriptions) {
    throw new Error("Argument 'subscriptions' is required.");
  }
  if (!scope) {
    throw new Error("Argument 'scope' is required.");
  }
  var self = this;

  this._watchCounter = -1;
  this._watchers = {};
  this._scope = scope;
  this._store = persistent ? store : {};
  if (!this._store[this._scope]) {
    this._store[this._scope] = { state: [{}], index: 0 };
  }
  this._subscriptions = subscriptions;

  this._subscriptions.on("change", function (oldDB, newDB) {
    Object.keys(self._watchers).map(function (key) { return self._watchers[key]; }).forEach(function (watcher) {
      if (watcher.key === "*") {
        return watcher.fn(newDB, oldValue, watcher.key);
      }
      var keyParts = watcher.key.split(".");

      var oldValue = oldDB;
      var newValue = newDB;

      for (var i = 0; i < keyParts.length; i++) {
        oldValue = oldValue && oldValue[keyParts[i]];
        newValue = newValue && newValue[keyParts[i]];
      }

      if (oldValue !== newValue) {
        watcher.fn(newValue, oldValue, watcher.key);
      }

    });
  });
};

var prototypeAccessors = { canUndo: {},canRedo: {},store: {},index: {},db: {} };

Store.prototype.subscribe = function subscribe (key, fn) {
  this._watchCounter++;
  this._watchers[this._watchCounter] = { key: key, fn: fn };
  return this._watchCounter;
};

Store.prototype.unsubscribe = function unsubscribe (arg) {
  var self = this;
  if (typeof arg === "number") {
    delete this._watchers[arg];
  } else if (typeof arg === "string") {
    Object.keys(this._watchers).forEach(function (id) {
      if (self._watchers[id].key === arg) { delete self._watchers[id]; }
    });
  } else if (typeof arg === "function") {
    Object.keys(this._watchers).forEach(function (id) {
      if (self._watchers[id].fn === arg) { delete self._watchers[id]; }
    });
  } else {
    throw new Error("Unsupport argument for unsubscribe");
  }
};

prototypeAccessors.canUndo.get = function () {
  return this.index > 0;
};

Store.prototype.undo = function undo () {
  if (!this.canUndo) { return; }
  var prevDB = this.db;
  this.store.index--;
  this._subscriptions.emit("change", prevDB, this.db);
};

prototypeAccessors.canRedo.get = function () {
  return this.store.state.length - 1 > this.index;
};

Store.prototype.redo = function redo () {
  if (!this.canRedo) { return; }
  var prevDB = this.db;
  this.store.index++;
  this._subscriptions.emit("change", prevDB, this.db);
};

Store.prototype.assoc = function assoc$1 () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

  return (this.db = assoc.apply(this, [this.db].concat(args)));
};

prototypeAccessors.store.get = function () {
  return this._store[this._scope];
};

prototypeAccessors.index.get = function () {
  return this.store.index;
};

prototypeAccessors.db.get = function () {
  return Object.freeze(this.store.state[this.index]);
};

prototypeAccessors.db.set = function (db) {
  var prevDB = this.db;
  this.store.index++;
  this.store.state.splice(this.index);
  this.store.state[this.index] = shallowCopy(db);
  this._subscriptions.emit("change", prevDB, this.db);
};

Object.defineProperties( Store.prototype, prototypeAccessors );

var store = new Store();

/*eslint-env*/ /*globals */
var _events = { global: new EventEmitter() };

var Events = function Events(ref) {
  if ( ref === void 0 ) ref = { };
  var store$$1 = ref.store; if ( store$$1 === void 0 ) store$$1 = new Store();
  var scope = ref.scope; if ( scope === void 0 ) scope = "global";

  this._store = store$$1;
  this._scope = scope;
  _events[scope] = _events[scope] || new EventEmitter();
  this._events = _events[scope];
};

Events.prototype.subscribe = function subscribe (name, fn) {
  var self = this;
  this._events.on(name, function (args) {
    args = args || {};
    args.store = args.store || self._store;
    fn.apply(self, [args]);
  });
  return self;
};

Events.prototype.unsubscribe = function unsubscribe (name, fn) {
  if (!this._events._events) {
    throw new Error("Unable to unsubscribe event, because there are no subscriptions");
  }
  if (!this._events._events[name] || !this._events._events[name].length) {
    throw new Error(("Unable to unsubscribe event '" + name + "', because there are no subscriptions"));
  }
  if (fn && typeof fn === "function") {
    if (this._events._events[name].indexOf(fn) === -1) {
      throw new Error(("Unable to unsubscribe event '" + name + "', because there are no subscriptions"));
    }
    return !!this._events._events[name].splice(this._events._events[name].indexOf(fn));
  }
  delete this._events._events[name];
  return true;
};

Events.prototype.dispatch = function dispatch (name) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (arguments.length === 1 && name instanceof Array) {
    args = name;
    name = args.shift();
  }
  if (!this._events._events || !this._events._events[name] || this._events._events[name].length === 0) {
    throw new Error(("Unable to dispatch event '" + name + "', because there are no subscribers"));
  }
  this._events.emit.apply(this._events, [name].concat(args));
};

/*eslint-env*//*globals */

/*eslint-env*/ /*globals*/
window.store = new Store();

function main() {
  return React.createElement( 'h2', null, "Number :: ", Math.random() );
}

ReactDOM.render(main(), document.getElementById("root"));

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
